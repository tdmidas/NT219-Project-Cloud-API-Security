import axios from "axios";
import { getToken, authRequest } from "./authService";

const API_URL = import.meta.env.VITE_APP_API_URL || "https://api.voux-platform.shop/api";
// tao voucher

export const createVoucher = async (voucherData) => {
	try {
		const token = sessionStorage.getItem("accessToken");
		if (!token) {
			throw new Error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o voucher!");
		}

		const response = await authRequest({
			url: "/vouchers/createVoucher",
			method: "POST",
			data: voucherData,
			headers: {
				Authorization: `Bearer ${token}`,
				"Content-Type": "application/json",
			},
		});
		return response.data;
	} catch (error) {
		console.error("L·ªói t·∫°o voucher:", error);
		throw error;
	}
};

// l·∫•y voucher c·ªßa ng∆∞·ªùi d√πng - S·ª¨A ƒê·ªÇ KH·ªöP PYTHON BACKEND
export const getUserVouchers = async (userId) => {
	try {
		// S·ª≠ d·ª•ng endpoint c√≥ trong Python backend
		const response = await authRequest({
			url: `/vouchers/user/${userId}/vouchers`,
			method: "GET",
		});
		if (response.data.success) {
			return response.data.vouchers; // Python backend tr·∫£ v·ªÅ .vouchers, kh√¥ng ph·∫£i .data
		} else {
			throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher!");
		}
	} catch (error) {
		console.error(error);
		throw new Error("L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
	}
};

// l·∫•y t·∫•t c·∫£ voucher - S·ª¨A RESPONSE FORMAT CHO PYTHON BACKEND
export const getAllVouchers = async () => {
	try {
		const response = await axios.get(`${API_URL}/vouchers/getAllVoucher`);
		console.log("üîç getAllVouchers response:", response.data);

		if (response.data.success) {
			// Python API Gateway tr·∫£ v·ªÅ response.data.data, kh√¥ng ph·∫£i response.data.vouchers
			const vouchers = response.data.data || [];
			console.log("‚úÖ Parsed vouchers:", vouchers.length, "items");
			return vouchers;
		} else {
			console.error("‚ùå API returned success=false:", response.data.message);
			throw new Error(response.data.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher!");
		}
	} catch (error) {
		console.error("‚ùå getAllVouchers error:", error);
		if (error.response) {
			console.error("Response status:", error.response.status);
			console.error("Response data:", error.response.data);
		}
		throw new Error(error.response?.data?.message || "L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
	}
};

// L·∫•y voucher theo platform - S·ª¨A CHO PYTHON BACKEND
export const getVouchersByPlatform = async (platform) => {
	try {
		// S·ª≠ d·ª•ng getAllVoucher v√† filter ·ªü frontend
		const response = await axios.get(`${API_URL}/vouchers/getAllVoucher`);
		console.log("üîç getVouchersByPlatform response:", response.data);

		if (response.data.success) {
			// Python API Gateway tr·∫£ v·ªÅ response.data.data
			const allVouchers = response.data.data || [];
			console.log("‚úÖ All vouchers:", allVouchers.length, "items");

			// Filter theo platform ·ªü frontend (t·∫°m th·ªùi)
			const filteredVouchers =
				platform === "all"
					? allVouchers
					: allVouchers.filter((v) => v.category === platform || v.voucherCategory?.title === platform);

			console.log("‚úÖ Filtered vouchers for", platform, ":", filteredVouchers.length, "items");
			return filteredVouchers;
		} else {
			console.error("‚ùå API returned success=false:", response.data.message);
			throw new Error(response.data.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch voucher!");
		}
	} catch (error) {
		console.error("‚ùå getVouchersByPlatform error:", error);
		if (error.response) {
			console.error("Response status:", error.response.status);
			console.error("Response data:", error.response.data);
		}
		throw new Error(error.response?.data?.message || "L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
	}
};

export const addToCart = async (voucherId, token) => {
	// Th√™m ki·ªÉm tra
	if (!voucherId) {
		throw new Error("Voucher ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
	}

	try {
		const response = await authRequest({
			url: "/cart/add",
			method: "POST",
			data: { voucher_id: voucherId.toString() }, // S·ª¨A: Python backend mong ƒë·ª£i voucher_id (snake_case)
		});
		return response.data;
	} catch (error) {
		console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
		throw new Error(error.response?.data?.message || "L·ªói k·∫øt n·ªëi khi th√™m v√†o gi·ªè h√†ng!");
	}
};

// L·∫•y s·ªë l∆∞·ª£ng voucher theo platform - S·ª¨A CHO PYTHON BACKEND
export const getVoucherCountByPlatform = async (platform) => {
	try {
		// S·ª≠ d·ª•ng getAllVouchers (ƒë√£ s·ª≠a) v√† count ·ªü frontend
		const vouchers = await getAllVouchers();
		console.log("üîç getVoucherCountByPlatform - All vouchers:", vouchers.length);

		const count =
			platform === "all"
				? vouchers.length
				: vouchers.filter((v) => v.category === platform || v.voucherCategory?.title === platform).length;

		console.log("‚úÖ Voucher count for", platform, ":", count);
		return count;
	} catch (error) {
		console.error("‚ùå getVoucherCountByPlatform error:", error);
		throw new Error("L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
	}
};

// L·∫•y t·∫•t c·∫£ uservoucher kh√¥ng l·ªçc theo g√¨ c·∫£ - S·ª¨A ƒê·ªÇ KH·ªöP ENDPOINT
export const getUserVouchersByUsername = async () => {
	try {
		// S·ª≠ d·ª•ng getUserVouchers v·ªõi current user ID
		const token = sessionStorage.getItem("accessToken");
		if (!token) {
			throw new Error("Vui l√≤ng ƒëƒÉng nh·∫≠p!");
		}

		// L·∫•y th√¥ng tin user hi·ªán t·∫°i tr∆∞·ªõc
		const profileResponse = await authRequest({
			url: "/auth/profile",
			method: "GET",
		});

		if (profileResponse.data.success) {
			const userId = profileResponse.data.user.id;
			return await getUserVouchers(userId);
		} else {
			throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng!");
		}
	} catch (error) {
		console.error(error);
		throw new Error("L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
	}
};
